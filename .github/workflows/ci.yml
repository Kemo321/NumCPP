name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  format-check:
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install clang-format
        run: apt update --yes && apt install --yes clang-format
      - name: Check code format
        run: clang-format -style=file -i --dry-run --Werror $(find . \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" -o -name "*.hxx" -o -name "*.inl" \) -not -path "*/build*/*")

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gcc: [11, 14]
    container: gcc:${{ matrix.gcc }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: apt update --yes && apt install --yes cmake clang-tidy
      - name: Create build directory
        run: mkdir build-gcc${{ matrix.gcc }}
      - name: Configure CMake
        run: cd build-gcc${{ matrix.gcc }} && cmake ../
      - name: Build
        run: cd build-gcc${{ matrix.gcc }} && make
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-gcc${{ matrix.gcc }}
          path: build-gcc${{ matrix.gcc }}/

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        gcc: [11, 14]
    container: gcc:${{ matrix.gcc }}
    steps:
      - uses: actions/checkout@v3
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-gcc${{ matrix.gcc }}
          path: build-gcc${{ matrix.gcc }}
      - name: Run tests
        run: cd build-gcc${{ matrix.gcc }} && ./tests